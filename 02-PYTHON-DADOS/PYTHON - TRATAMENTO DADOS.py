# OPERADORES ARITMETICOS

# SOMA '+' / SUBTRAÇAO '-' / MULTIPLICAÇAO '*' / DIVISAO '/' / POTENCIA '**' / MODULO '%'
# EXEMPLOS
X = 3 + 3 / X = 3 - 3 / X = 3 * 3 / X = 3 / 3 / X = 3**3 / X = 3 % 3

#FUNÇAO 'NOMEFX(PARAMETRO)' 
#EXEMPLO

#FUNÇAO 'TYPE()' RETORNA O TIPO DO DADO
TYPE(5) or TYPE(VAR)

#OPERAÇAO COM DADO DE TIPO FLOAT
#INT com FLOAT da FLOAT (exceto divisao que devolve float entre INT)
#para forçar INT na divisao se usa o '//'

#CONVERSÃO PARA BIN/HEX
bin(129) / hex(129)

#ABS (MODULO, VALOR ABSOLUTO)
#ROUND (ARREDONDA O NUMERO EM CASAS)
#POW (POTENCIA)
abs(-10) 'retorna 10'
round(3.213412,2) 'parametro 1 - numero, parametro 2 - numero de casas'
pow(4,3) 'parametro 1 - base, parametro 2 - potencia'

#VARIAVEIS
#NAO PODE COMEÇAR NOME DA VARIAVEL COM NUMERO
#NAO PODE USAR PALAVRA RESERVADA COMO NOME (COMANDOS)

#ATRIBUINDO VALOR A VARIAVEL '='
VAR = 1

#IMPRIMINDO VARIAVEL
print(VAR) or VAR

#POSSO DECLARAR MAIS DE UMA VARIAVEL EM UMA MESMA LINHA USANDO VIRGULA
var1, var2, var3 = 'BOB', 'MARIA', 'ANA'

#OPERAÇOES ARITMETICAS SAO LIVRES COM VARIAVEIS
var3 = var2 * var1

#STRING

#USAR '\N' NA STRING DA ENTER E QUEBRA LINHA
print('Teste \n Enter1')

#INDEXIZAÇAO (posiçao das letras em uma string) COMEÇA POR 0
#VAR seguido de COLCHETES e o NUMERO DA LETRA imprime ela
var = "teste"
var[0]

#dois pontos ':' determina intervalo no index
#ao omitir apos ou antes os ':' determina tudo
#numero APOS ':' é EXCLUSIVE
var[1:]
var[:3]

#AO UTILIZAR O NEGATIVO LE AO CONTRARIO A STRING
#VAZIO AINDA SIGNIFICA TUDO E O EXCLUSIVE SE MANTEM APOS OS ':'
var[:-1]

# UTILIZANDO '::' , SINTAXE [INICIO:FIM:PASSO]
# PASSO NEGATIVO INVERTE A LEITURA
var[1:2:1]

#NAO SE PODE MODIFICAR O VALOR DE UM CARACTER DA STRING POR FORA

#STRING em python aceita aspas duplas ou simples
#PRINT para string tem que ser entre aspas
print('Teste string')

#FUNÇOES BUILT-IN 

#TUDO PRA MAIUSCULO
var.upper()

#TUDO PRA MINUSCULO
var.lower()

#QUEBRA A LINHA A CADA ESPAÇO
#POR PADRAO QUEBRA A CADA ESPAÇO, PODE ESPECIFICAR QUAL CARACTER DENTRO DO ()
var.split()

#FUNÇOES PARA STRING

#CONVERTE A PRIMEIRA LETRA PRA MAIUSCULO
var.captalize()

#CONTA QUANTAS VEZES TEM O CARACTER DEFINIDO NA STRING
var.count(a)

#RETORNA T/F BOOLEANO CASO SEJA OU NAO TODA DE NUMERO A STRING
var.isalnum()

#RETORNA T/F BOOLEANO CASO SEJA OU NAO TODA DE LETRA MINUSCULA A STRING
var.islower()

#RETORNA T/F BOOLEANO CASO SEJA OU NAO TODA DE ESPAÇO
var.isspace()

#RETORNA T/F BOOLEANO CASO TERMINE OU NAO COM A LETRA DEFINIDA COMO PARAMETRO
var.endswith('a')

#COMPARANDO DUAS STRING RETORNANDO BOOLEANO
print("Python" == "a")
False

#ESTRUTURA DE DADOS EM PYTHON !!!!!

#CRIANDO LISTA
lista = ["arroz","feijao","frango","ovo"]

#DA PRA ARMAZENAR MAIS DE UM TIPO DE DADO NA LISTA
lista = ["arroz",2,"feijao",2.1,"frango"]

#INDEXIZAÇAO EM LISTA FUNCIONA COMO NA DE STRING, MAS AO INVES DE LETRA POR LETRA É ITEM POR ITEM
#TAMBEM COMEÇA POR ZERO!!
item1 = lista[0]
item2 = lista[1]

#DIFERENTE DA STRING, PODE MODIFICAR O VALOR DE UM ITEM DENTRO DA LISTA
lista = ["arroz","feijao","frango","ovo"]
item[0] = "carne"
lista = ["carne","feijao","frango","ovo"]

#TAMBEM POSSO DELETAR UM ITEM DENTRO DA LISTA
#AO DELETAR UM ITEM A LISTA SE REORGANIZA E NAO FICA NULO O ITEM DELETADO
del lista[0]

#LISTA DENTRO DE LISTA
#ATRAVES DE VARIAVEIS DA PRA IR QUEBRANDO AS LISTAS
#EXEMPLO
lista1[[1,2,3],[4,5,6],[7,8,9,10]]
a = lista1[1]
b = a[0]

#AGORA SENDO DIRETO E MELHOR
#CADA CHAVE VAI ENTRANDO NOS SUBGRUPOS
print(lista1[1][0])

#SOMAR DUAS LISTAS MESMO NUMERICAS APENAS CONCATENA

lista = [1,3,4,5]
lista1 = [5,4,7,8,9]
x = lista + lista2 
print(x)
[1, 3, 4, 5, 5, 4, 7, 8, 9]

#TESTANDO PRA VER SE HA O ELEMENTO NA LISTA (BOOLEANO)
print(10 in lista)
false

#FUNÇOES BUILT-IN EM LISTAS

#RETORNANDO TAMANHO DA LISTA
len(lista)

#RETORNANDO VALOR MAXIMO DA LISTA
max(lista)

#RETORNANDO MENOR VALOR DA LISTA
min(lista)

#ADICIONANDO VALOR COM APPEND
#AO ADICIONAR MAIS DE UM ELE INSERE O CONJUNTO DE DADOS EM FORMA DE LISTA SEM DESEMPACOTAR
lista.append(23)

#ADICIONANDO VALORES COM EXTEND
#ADICIONAO UNITARIAMENTE
lista.extend(2,3,4)

#ADICIONANDO VALOR EM UM INDEX ESPECIFICO (EMPURRA OS DA FRENTE 1 CASA PRA FRENTE)
lista.insert(2,10) #(INDEX,VALOR)

#DELETANDO VALOR NUMA LISTA (LISTA SE REORGANIZA APOS, NAO DEIXA INDEX VAZIO)
lista.remove(10) #VALOR

#INVERTENDO ORDEM DOS INDEX
lista.reverse()

#ORDENANDO A LISTA (ASC)
lista.sort()

#CONTANDO NUMERO DE ELEMENTOS IGUAIS NA LISTA
lista.count(10)

#DESCOBRINDO INDEX DE UM VALOR EM UMA LISTA
lista.index(2)

#DICIONARIO
#PODE TER CHAVE E VALOR IGUAL (EM PARES DIFERENTES)
#FUNCIONA COMO PARES, CADA VALOR TEM UMA CHAVE, AMBOS PODEM SER STRING OU VALOR NUMERICO, O SEGUNDO PERTENCE AO PRIMEIRO (CHAVE)
aluno_idade = {"Pedro":22,"Ana":28,"Carlos":32}

#PARA SELECIONAR APENAS USAR PRINT E COLOCAR 'nome do dicionario'[CHAVE]
print(aluno_idade["Pedro"])

#PARA ADICIONAR VALOR BASTA COLOCAR 'nome do dicionario'[CHAVE] = valor
aluno_idade["Marcos"] = 21

#LIMPANDO O DICIONARIO POR COMPLETO
aluno_idade.clear()

#DELETANDO O DICIONARIO
del aluno_idade

#A FUNÇAO LEN TRAZ O NUMERO DE PARES (VALORES COM RESPECTIVAS CHAVES)
len(aluno_idade)

#TRAZENDO SOMENTE AS CHAVES
aluno_idade.keys()

#TRAZENDO SOMENTE OS VALORES 
aluno_idade.values()

#TRAZENDO OS PARES EM FORMA DE ITEM UNITARIO
aluno_idade.items()

#FUNÇAO PARA PEGAR OS ITENS(PARES) DE UM DICIONARIO E ADICIONANDO EM OUTRA
aluno_idade.update(lista2)

#PODE ATRIBUIR VALORES DE DICIONARIOS EM VARIAVEIS ATRAVES DAS CHAVES
val = aluno_idade["Pedro"]
print(val)

#UMA CHAVE EM UM DICIONARIO PODE RECEBER UMA LISTA COMO VALOR
dic_lista = {'chave1':[1,2,3,4,5],'chave2':[7,8,9,10]}

#BUSCANDO VALOR DENTRO DE UMA LISTA Q ESTA DENTRO DE UM DICIONARIO
print(dic_lista['chave1'][0])

#APLICANDO FUNÇAO EM UM VALOR DENTRO DA LISTA OU REALIZANDO OPERAÇAO, DENTRO DO DICIONARIO
dic_lista['chave1'][0].upper()
x = dic_lista['chave1'][0] - 2

#BONUS - OPERANDO SOBRE UM VALOR E JA ADICIONANDO O RESULTADO NO LUGAR DO VALOR OPERADO
dic_lista['chave1'][0] -= 2

#DA PRA COLOCAR DICIONARIO DENTRO DE DICIONARIO, APESAR DE NAO SER RECOMENDADO - ANINHADO 
dic1{"dic1.1":{"dic1.2":1000}}

#BUSCANDO VALOR DENTRO DOS DICIONARIOS, MESMO QUE A LISTA, CHAVES ATE IR NO VALOR DO SUBGRUPO SO QUE NESSE POR CHAVE AO INVES DE INDEX
print(dic1["dic1.1"]["dic1.2"])











