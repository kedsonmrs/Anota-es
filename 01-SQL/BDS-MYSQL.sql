/* Modelagem basica - ENTIDADE = TABELA EX: CLIENTE
					  CAMPOS = ATRIBUTOS EX:NOME */

CLIENTE

NOME CARACTER (30)
CPF NUMERICO (11)
EMAIL CARACTER (30)
TELEFONE CARACTER (30)
ENDEREÇO CARACTER (100)
SEXO CARACTER (1)

/* PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - AD ADM DE DADOS */
	MODELAGEM CONCEITUAL - RASCUNHO (QUALQUER PROGRAMA) - ACIMA (DEFINE TIPAGEM)
	MODELAGEM LÓGICA - QUALQUER PROGRAMA DE MODELAGEM! (MANTER PADRÕES)

/* FASE 03 - DBA / AD */  
	MODELAGEM FISICA - SCRIPTS DE BANCO - PARTE PRO BDS EX: MYSQL

/* BOA PRATICA - TIPAR NO NOTEPAD */

/* CRIANDO O BDS */

CREATE DATABASE PROJETO;
CREATE DATABASE EXEMPLO;

/* CONECTANDO A UM BDS */

USE PROJETO/EXEMPLO

/* CRIANDO UMA TABELA */

CREATE TABLE CLIENTE(
	NOME VARCHAR (30),
	SEXO CHAR (1),
	EMAIL VARCHAR (30),
	CPF INT (11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR (100)
);

/* TUNNING - MELHORAR PERFOMANCE DO BDS - QUERYS MAIS RAPIDAS */

/* VERIFICANDO TABELAS DO BANCO - SOMENTE MYSQL */

SHOW TABLES; /* FUNÇAO COMPILADA - select from dic dados */

/* ESTRUTURA DA TABELA */

DESC CLIENTE;

/* TUNNING - CHAR PARA CAMPOS QUE NAO VARIAM (LIGEIRAMENTE MAIS RAPIDO Q VARCHAR) */
/* ENUM DELIMITA OPÇOES (CAIXA DE OPÇOES) PARA DIMINUIR GAMA - SOMENTE MYSQL */

/* FLOAT (10,2) - 10 = NUMERO DE CASAS / 3 = NUMERO DE CASAS DECIMAIS */
/* INT SUSTENTA NO MAXIMO 11 DIGITOS - POREM HA UM NUMERO MAXIMO (DOCUMENTO) */
/* NUMEROS QUE NAO SAO USADOS PARA CALCULO = VARCHAR */

/* LINHA = REGISTO/TUPLA */
/* CELULAS = CAMPOS/COLUNAS */

/* INSERINDO DADOS - INSERT INTO TABELA... */

/* FORMA 1 - OMITINDO AS COLUNAS */
/* ORDEM TEM QUE SER NECESSARIAMENTE DAS COLUNAS DA TABELA E TODAS ELAS */

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');
INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');
INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/* FORMA 2 - ESPECIFICANDO COLUNAS */
/* NAO PRECISA SER TODAS E VEM NA ORDEM ESPECIFICADA */

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 3 - MAIS DE UM REGISTRO DE UMA VEZ (COMPACTO) APENAS SEPARAR POR VIRGULAS - SOMENTE NO MYSQL */

INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
	('CARLA','F','CARLA@TERATI.COMO.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

/* SELECT - PROJEÇÃO - MOSTRAR QUALQUER COISA - COLUNAS */

SELECT NOW(); /* HORAS E DATA */

SELECT 'FELIPE MAFRA';

/* ALIAS DE COLUNAS - SUBSTUI NOME - AS 'NOME DESEJADO' */

SELECT NOME AS CLIENTE, SEXO, EMAIL FROM CLIENTE;

SELECT NOME AS CLIENTE, SEXO, EMAIL, ENDERECO FROM CLIENTE;

/* SELEÇÃO - WHERE - FILTRO A NIVEL DE LINHA/REGISTRO */
/* PROJEÇÃO -/- SELEÇAO - WHERE NAO NECESSARIAMENTE MOSTRA NA TELA */
/* SINAL DE = DEVE SER INTEIRAMENTE IGUAL AO CAMPO */

SELECT NOME, SEXO FROM CLIENTE 
WHERE SEXO = 'M';

SELECT NOME, ENDERECO FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO = 'RJ';

/* USANDO O LIKE */
/* DEVE SER UTILIZADO COM O CORINGA %=RESTO */

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE 'OSCAR CURY%';

SELECT NOME, SEXO FROM CLIENTE
WHERE ENDERECO LIKE '%CENTRO%';

/*STATUS - VE ATUAL DB EM USO */

/* OPERADORES LÓGICOS OR/AND NOS FILTROS (WHERE) */

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE SEXO = 'F' OR ENDERECO LIKE '%ESTACIO';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE SEXO = 'M' AND ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE
WHERE SEXO = 'F' AND ENDERECO LIKE '%ESTACIO';

/* COUNT(*) FUNÇAO PARA CONTAR O NUMERO DE REGISTROS, GROUP BY ... ACOMPANHA PARA DIVIDIR A SOMA ENTRE AS OPÇOES */
/* NUMERO DAS LINHAS NAS COLUNAS DEVEM SER IGUAIS SE NAO DA ERRO */

SELECT SEXO, COUNT(*)
FROM CLIENTE;
GROUP BY SEXO;

/* TUNNING - NO USO DO OR, DEVE-SE COLOCAR A OPÇAO MAIS PROVAVEL PRIMEIRO */
/* TUNNING - NO USO DO AND, DEVE-SE COLOCAR A OPÇAO MENOS PROVAVEL PRIMEIRO */

/* FILTRANDO VALORES NULOS */
/* SE USA 'IS' POIS = NAO FUNCIONA PARA FILTRAR NULL */

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NULL; 

/* 'IS NOT' PARA SABER OS QUE NAO TEM NULL */

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE EMAIL IS NOT NULL;

/* ATUALIZANDO DADOS NO BANCO USANDO O 'UPDATE' */
/* UTILIZA-SE O WHERE PARA FILTRAR ONDE ATUALIZA !!!!!*/
/* CASO CONTRARIO ELE ATUALIZA TODOS OS REGISTROS DA TABELA */

UPDATE CLIENTE
SET EMAIL = 'CARLAMG@HOTMAIL.COM'
WHERE NOME = 'CARLA';

/* 'DELETE' PARA APAGAR ALGUM REGISTRO */
/* UTILIZA-SE O WHERE PARA FILTRAR ONDE DELETAR !!!!!*/
/* 'DELETE' NAO NECESSITA DO * PRA ESPECIFICAR COLUNA, NECESSARIAMENTE */

DELETE FROM CLIENTE
WHERE NOME = 'ANA';

/* UTILIZA-SE OS MESMOS OPERADORES LOGICOS 'OR/AND COM WHERE PARA FILTRAR */

DELETE FROM CLIENTE
WHERE NOME = 'ANA' AND NOME = 'CLARA';

/* MODELAGEM DE BANCO DE DADOS */

/* PRIMEIRA FORMA NORMAL */

/* 1 - TODO CAMPO VETORIZADO SE TORNARÁ OUTRA TABELA, MAIS DE UM DADO DA MESMA FAMILIA NO CAMPO */
/* 2 - TODO CAMPO MULTIVALORADO/DISIVIVEL TAMBÉM, MAIS DE UM DADO DE FAMÍLIA DIFERENTE */
/* 3 - TODA TABELA TEM Q TORNAR UNICO UM REGISTRO ATRAVES DE ALGUM DADO (PK) */

/* CHAVE NATURAL - JA EXISTE/PERTENCE AO USUARIO */
/* CHAVE ARTIFICIAL - CHAVE CRIADA PARA IDENTIFICAR (MAIS UTILIZADA) */

/* UM BANCO DE DADOS NAO TEM CONTROLE DE FILTRAR INFORMAÇOES QUE ENTRAM, A CAMADA DO SOFTWARE QUE FILTRA */
/* POREM CONSEGUE CONTROLAR SE ENTRA UM OU MAIS DE UM */

/* FK - FOREIGN KEY - CHAVE PRIMARIA DE UMA TABELA QUE JA EXISTE */
/* FK EM RELAÇAO 1X1 FICA NA TABELA MAIS FRACA */
/* FK EM RELAÇAO 1XN FICA NA TABELA N */
/* FK DEVE SE DO MSM TIPO DA PRIMARIA A QUE SE REFERE */
/* 'UNIQUE' NA FK RESTRINGE O MAXIMO DE REGISTRO - DEFINE A RELAÇAO 1X1 */ 

CREATE DATABASE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30) NOT NULL,
	SEXO ENUM ('M','F') NOT NULL,
	EMAIL VARCHAR(30) UNIQUE,
	CPF VARCHAR (15) UNIQUE
);

CREATE TABLE ENDERECO(
	IdEndereco INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR (20) NOT NULL,
	BAIRRO VARCHAR (20) NOT NULL,
	CIDADE VARCHAR (20) NOT NULL,
	ESTADO CHAR (2) NOT NULL,
	Id_Cliente INT UNIQUE,
	FOREIGN KEY(Id_Cliente)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE(
	IdTelefone INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ('CEL','RES','COM') NOT NULL,
	TELEFONE VARCHAR (15) NOT NULL,
	Id_Cliente INT,
	FOREIGN KEY(Id_Cliente)
	REFERENCES CLIENTE(IDCLIENTE)	
);
	
/* AO DAR INSERT DEVE ESPECIFICAR 'NULL' PARA PK OU ESPECIFICAR AS COLUNAS */

INSERT INTO CLIENTE (NOME,SEXO,EMAIL,CPF) VALUES
	('MÁRIO','M','KEDSONMRS@GMAIL.COM','06242861186'),
	('CAROLINA','F','CAROLINAMRS@GMAIL.COM','06242861185'),
	('ITALO','M','ITALOMRS@GMAIL.COM','06242861184'),
	('ALEXANDRE','M','ALEXANDREMRS@GMAIL.COM','06242861183'),
	('GLEICILENE','F','GLEICIMRS@GMAIL.COM','06242861182'),
	('AMORIM','M','AMORIMMRS@GMAIL.COM','06242861181')
	
;

INSERT INTO ENDERECO (RUA, BAIRRO, CIDADE, ESTADO) VALUES
	('RUA 31 NORTE','AGUAS CLARAS','BRASILIA','DF')
;

INSERT INTO CLIENTE (NOME,SEXO,EMAIL,CPF) VALUES
	('CAROLINA','F','CAROLINAMRS@GMAIL.COM','06242861185'),
	('ITALO','M','ITALOMRS@GMAIL.COM','06242861184'),
	('ALEXANDRE','M','ALEXANDREMRS@GMAIL.COM','06242861183'),
	('GLEICILENE','F','GLEICIMRS@GMAIL.COM','06242861182'),
	('AMORIM','M','AMORIMMRS@GMAIL.COM','06242861181')
	
;

UPDATE CLIENTE
SET EMAIL = NULL
WHERE IDCLIENTE = 2;

/* TABELA CLIENTE */

+-----------+------------+------+------------------------+-------------+
| IDCLIENTE | NOME       | SEXO | EMAIL                  | CPF         |
+-----------+------------+------+------------------------+-------------+
|         1 | MÁRIO      | M    | KEDSONMRS@GMAIL.COM    | 06242861186 |
|         2 | CAROLINA   | F    | NULL                   | 06242861185 |
|         3 | ITALO      | M    | ITALOMRS@GMAIL.COM     | 06242861184 |
|         4 | ALEXANDRE  | M    | ALEXANDREMRS@GMAIL.COM | 06242861183 |
|         5 | GLEICILENE | F    | GLEICIMRS@GMAIL.COM    | 06242861182 |
|         6 | AMORIM     | M    | AMORIMMRS@GMAIL.COM    | 06242861181 |
+-----------+------------+------+------------------------+-------------+

/* AO DAR INSERT A FK TEM QUE TER REFERENCIA EXISTENTE OBRIGATORIA DA PK */

INSERT INTO ENDERECO VALUES
	(NULL,'RUA 30 NORTE','AGUAS CLARAS','BRASILIA','DF',2),
	(NULL,'RUA 29 NORTE','AGUAS CLARAS','BRASILIA','DF',3),
	(NULL,'RUA 28 NORTE','AGUAS CLARAS','BRASILIA','DF',4),
	(NULL,'RUA 27 NORTE','AGUAS CLARAS','BRASILIA','DF',5),
	(NULL,'RUA 26 NORTE','AGUAS CLARAS','BRASILIA','DF',6)
	;
	
/* TABELA ENDERECO */

+------------+--------------+--------------+----------+--------+------------+
| IdEndereco | RUA          | BAIRRO       | CIDADE   | ESTADO | Id_Cliente |
+------------+--------------+--------------+----------+--------+------------+
|          1 | RUA 31 NORTE | AGUAS CLARAS | BRASILIA | DF     |          1 |
|          3 | RUA 30 NORTE | AGUAS CLARAS | BRASILIA | DF     |          2 |
|          4 | RUA 29 NORTE | AGUAS CLARAS | BRASILIA | DF     |          3 |
|          5 | RUA 28 NORTE | AGUAS CLARAS | BRASILIA | DF     |          4 |
|          6 | RUA 27 NORTE | AGUAS CLARAS | BRASILIA | DF     |          5 |
|          7 | RUA 26 NORTE | AGUAS CLARAS | BRASILIA | DF     |          6 |
+------------+--------------+--------------+----------+--------+------------+
	
INSERT INTO TELEFONE VALUES
	(NULL,'CEL','61982703350',1),
	(NULL,'CEL','61982703352',3),
	(NULL,'CEL','61982703353',5),
	(NULL,'CEL','61982703354',2),
	(NULL,'CEL','61982703355',6),
	(NULL,'CEL','61982703356',4)
	;
	
/* TABELA TELEFONES */

+------------+------+-------------+------------+
| IdTelefone | TIPO | TELEFONE    | Id_Cliente |
+------------+------+-------------+------------+
|          1 | CEL  | 61982703350 |          1 |
|          2 | CEL  | 61982703352 |          3 |
|          3 | CEL  | 61982703353 |          5 |
|          4 | CEL  | 61982703354 |          2 |
|          5 | CEL  | 61982703355 |          6 |
|          6 | CEL  | 61982703356 |          4 |
+------------+------+-------------+------------+

INSERT INTO TELEFONE VALUES (NULL,'RES','6132740485',1);

UPDATE TELEFONE
SET TIPO = 'COM'
WHERE IdTelefone = 2;

DELETE FROM TELEFONE
WHERE IdTelefone = 3;

/* JUNÇAO 2 TABELAS COM INNER JOIN/ COM 3 APENAS ADICIONA OUTRO INNER JOIN */
/* QUANDO HOUVER AMBIGUIDADEM, ESPECIFICAR ATRAVES DO 'ENDERECO.' A COLUNA (PONTEIRAR) */
/* TUNNING - PONTEIRAR (ESPAÇO E APELIDO APOS NOME DA TABELA) */

SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJEÇAO */
FROM CLIENTE /* ORIGEM 1 */
INNER JOIN ENDERECO /* ORIGEM 2 JA JUNTANDO */
ON IDCLIENTE = Id_Cliente 
WHERE SEXO = 'F'; /* FILTRO/SELEÇAO */

SELECT NOME, SEXO, TIPO, TELEFONE
FROM CLIENTE
INNER JOIN TELEFONE
ON IDCLIENTE = Id_Cliente
ORDER BY 1;

SELECT NOME, SEXO, TIPO, TELEFONE, RUA, BAIRRO
FROM CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.Id_Cliente
INNER JOIN ENDERECO E
ON IDCLIENTE = E.Id_Cliente
WHERE SEXO = 'M';

/* DML - DATA MANPULATION LANGUAGE - EDIÇAO DOS DADOS NA TABELA JA CRIADA */

/* DDL - DATA DEFINITION LANGUAGE - DEFINE/EDITA O TIPO DE DADO QUE A TABELA IRA RECEBER */
/* CHANGE - ALTERA TIPO DE DADO/NOME DA COLUNA NA TABELA */

ALTER TABLE 'NOME DA TABELA'
CHANGE 'NOME DA COLUNA VELHA' / 'NOME DA COLUNA NOVA' INT;

/* MODIFY - ALTERA TIPO DE DADO E RESTRIÇAO DA COLUNA */
/* NAO TEM COMO ADICIONAR PK NO MODIFY */

ALTER TABLE 'NOME DA TABELA'
MODIFY 'NOME DA COLUNA' VARCHAR (50) NOT NULL;

/* ADICIONANDO UMA NOVA COLUNA NA TABELA */
/* SEM ESPECIFICAR ORDEM, FICA POR ULTIMO */
/* TAMBEM HA A POSSIBILIDADE DE DEFINIR A ORDEM DA COLUNA */

ALTER TABLE 'NOME DA TABELA'
ADD 'NOME DA COLUNA' FLOAT (10,2) NOT NULL;

ALTER TABLE 'NOME DA TABELA'
ADD COLUMN 'NOME DA COLUNA' FLOAT (10,2) NOT NULL
AFTER 'COLUNA QUE VEM ANTES'; /* PARA PRIMEIRA, APENAS 'FIRST' */

/* APAGANDO UMA COLUNA */

ALTER TABLE 'NOME DA TABELA'
DROP COLUMN 'NOME DA COLUNA';

/* CLAUSULA 'IN' - ABREVIAÇÃO PARA MULTIPLOS 'OR' */

UPDATE CLIENTE
SET SEXO = 'F'
WHERE ID CLIENTE IN(12,23,45,67);

/* NO INNER JOIN COLOCAR ORIGEM 'FROM' A TABELA DO 'MEIO' MAIS IMPORTANTE */

/* 'IFNULL ()' FUNÇAO PARA SUBSTITUIR NOME DE VALORES NULOS NUMA COLUNA */
/* NECESSITA DE PARAMETRO '()' QUE É A COLUNA EM QUESTÃO */
/* IFNULL(COLUNA,'STRING') */
/* USAR O ALIAS DE COLUNA PARA TIRAR A FUNÇAO DA TELA */

SELECT NOME, IFNULL(EMAIL,'***********') AS EMAIL, ESTADO, TELEFONE FROM CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.Id_Cliente
INNER JOIN ENDERECO E
ON IDCLIENTE = E.Id_Cliente;

/* 'VIEW' - ABREVIA TODA UMA QUERY - PODENDO SER USADA COMO FONTE PARA PROJEÇÃO COM SELEÇÃO NORMALMENTE*/

/* CRIANDO UMA VIEW */
/* COLOCAR 'V_' PARA DIFERENCIAR AS VIEWS DAS TABELAS */
/* HÁ PERDA DE PERFORMANCE, APESAR DE POUCA */

CREATE VIEW V_RELATORIO1 AS
SELECT NOME, SEXO, EMAIL, TELEFONE, TIPO, ESTADO FROM CLIENTE
INNER JOIN TELEFONE T
ON IDCLIENTE = T.Id_Cliente
INNER JOIN ENDERECO E
ON IDCLIENTE = E.Id_Cliente;

SELECT * FROM RELATORIO1;

/* DELETANDO VIEW */

DROP VIEW RELATORIO1;

/* NAO NECESSARIAMENTE SE PROJETA TODAS AS COLUNAS JA EMBUTIDAS NO VIEW */
/* JA POSSUI OS JOINS FEITOS, SIMPLIFICA A ANALISE */


SELECT NOME, TELEFONE, ESTADO FROM V_RELATORIO1;

/* COMANDOS DML NO VIEW / INSERT, UPDATE E DELETE / */
/* NAO PODEM SER EXECUTADOS 'DELETE' E 'INSERT' EM VIEWS COM JOIN DE MAIS DE UMA TABELA */
/* APENAS SELECT E UPDATE PODEM SER FEITOS EM VIEW COM JOIN */
/* AO UTILIZAR UPDATE TOMAR CUIDADO POIS NA VIEW SO EXISTEM AS TABELAS PRE DETERMINADAS */

/* ORDER BY - ORDENA OS REGISTROS POR ALGUMA COLUNA */

SELECT * FROM ALUNOS
ORDER BY 1,NUMERO ou NOME /* N DA COLUNA ou NOME DA COLUNA */

/* AO ORDENAR POR MAIS DE UMA COLUNA, SE CONSIDERA A ORDEM , LOGO APOS ORDENA AS EMPATADAS*/
/* NAO PODE ORDENAR POR MAIS COLUNAS QUE AS PROJETDAS !!COM NUMEROS!! - COM NOME FUNCIONA */
/* 'ASC' PRA CRESCENTE (PADRÃO) e 'DESC' PARA DECRESCENTE */
/* ASC E DESC VAO LOGO APOS A COLUNA ESPECIFICADA */

SELECT * FROM ALUNOS
ORDER BY 1 DESC, 2 DESC;

/* MUDANDO DELIIMITADOR ';' */

DELIMITER &

/* COMPULSORIO MUDAR O DELIMITER PARA NAO INTERROMPER A CRIANÇAO DA PROCEDURE NO MEIO */
/* APOS TER FEITO A PROCEDURE, PODE VOLTAR PARA O DELIMITER COMUM ; */
/* PARA APAGAR 'DROP POCEDURE NOME' */

/* CRIANDO SEM PARAMETRO */

CREATE PROCEDURE NOME ()
BEGIN
	QUALQUER PROGRAMAÇAO;
END
&

/* CRIANDO COM PARAMETRO () */
/* VARIAVEIS DEFINIDAS NA CRIAÇAO ENTRE PARENTESES, DEVE SABER A ORDEM */

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
	SELECT NUMERO1 + NUMERO2 AS RESUFtLTADO;
END
&

/* CHAMANDO A FUNÇAO */

CALL CONTA(100,2);

/* !!!!!!!!!!!! PRATICANDO !!!!!!!!!!!!! */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30) NOT NULL,
	PRECO FLOAT (10,2) NOT NULL,
	ANO INT (4) NOT NULL
);

INSERT INTO CURSOS (NOME, PRECO, ANO) VALUES ('JAVA',250.99,2002),('BANCO DE DADOS',300,2015),('PYTHON', 150.99,2020);

CREATE PROCEDURE ADDCURSO(P_NOME VARCHAR(30), P_PRECO FLOAT (10,2), P_ANO INT(4))
BEGIN
	INSERT INTO CURSOS (NOME, PRECO, ANO) VALUES (P_NOME, P_PRECO, P_ANO);
END
$

CALL ADDCURSO ('C#',526.99,2004);

CREATE PROCEDURE CONSULCURSO(P_IDCURSO INT)
BEGIN
	SELECT * FROM CURSOS
	WHERE IDCURSO = (P_IDCURSO);

END
$

/* MAX, MIN, AVG */
/* MAX - VALOR MAXIMO DE UMA COLUNA, MIN - VALOR MINIMO e AVG - MEDIA DE UMA COLUNA */

SELECT MIN(PRECO) FROM CURSOS;

SELECT MAX(PRECO) FROM CURSOS;

SELECT AVG(PRECO) FROM CURSOS;

/* TRUNCATE - FUNÇAO PARA DELIMITAR CASAS DECIMAIS */

SELECT TRUNCATE(AVG(PRECO),2) AS MEDIA_DE_PRECO FROM CURSOS;
 
/* FUNÇAO SUM - MOSTRA A SOMA TOTAL DE UMA COLUNA */
/* USADO COM GROUP BY PARA DIVIDIR ENTRE REGISTROS */

SELECT SUM(PRECO) AS SOMA_PRECO_CURSOS FROM CURSOS;

SELECT SUM(JANEIRO), SEXO
GROUP BY SEXO;

/* SUBQUERY - GERALMENTE USADO PARA FILTRAR USANDO O VALOR DE UMA FUNÇAO */
/* NESSA SUBQUERY PEDE-SE O GROUP BY POIS MESMO FILTRANDO PUXA O CONFLITO DE NUMERO DE REGISTROS */

SELECT NOME, MIN(PRECO) FROM CURSOS
WHERE PRECO = (SELECT MIN(PRECO) FROM CURSOS)
GROUP BY NOME;

/* EM FUNÇOES DE AGREGAÇAO SE USA O GROUP BY PARA PROJETAR MAIS DE UMA COLUNA */

/* OPERAÇOES DE REGISTROS/HORIZONTAL, SE FAZ NA MAO COM CONTAS ARITMETICAS */

SELECT NOME, FEVEREIRO, JANEIRO, MARCO, (FEVEREIRO+JANEIRO+MARCO) AS TOTAL_VENDAS
FROM FUNCIONARIOS;

/* NOMEANDO CONSTRAINT DAS PK/FK ADICIONANDO-AS APOS CRIAÇAO DA TABELA */
/* MELHOR VISUALIZAÇAO APOS NO DICIONARIO DE DADOS , BOA PRATICA */

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE /* NOME DA CONSTRAINT */
PRIMARY KEY(IDCLIENTE);

ALTER TABLE ENDERECO ADD CONSTRAINT FK_CLIENTE_ENDERECO
FOREIGN KEY ID_CLIENTE REFERENCES CLIENTE(IDCLIENTE);

/* DICIONARIO DE DADOS */

SHOW DATABASE;

/* POSSIVEL ACHAR AS CHAVES/CONSTRAINTS E MANIPULA-LAS*/
/* APAGANDO UMA CONSTRAINT/CHAVE */
/* TEM QUE ESTAR NO BANCO PARA APAGAR A CONSTRAINT */

ALTER TABLE 'NOME TABELA'
DROP FOREING KEY/PRIMARY KEY 'NOME DA CONSTRAINT/CHAVE';

/* DERRUBAR E COLOCAR FK NOVAMENTE */
/* POSSIVEL COM DADOS JA NA TABELA, USADO GERALMENTE PRA INSERÇAO DE DADOS EM MASSA, CORRE RISCO POIS DESABILITA O CHECK */

/* LOCALIZANDO PROCEDURES NO MYSQL */

USE INFORMATION_SCHEMA;

SELECT ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_DEFINITION FROM ROUTINES
WHERE ROUTINE_SCHEMA = 'livraria';

/* TRIGGER - GATILHO */
/* TAMBEM SE MODIFICA O DELIMITER */
/* NAO PODE EXISTIR 2 TRIGGER DE BEFORE DELETE */

CREATE TRIGGER 'NOME'
BEFORE/AFTER INSERT/DELETE/UPDATE ON 'TABELA'
FOR EACH ROW /* PADRAO */
BEGIN /*INICIA*/

/* QUALQUER PROGRAMAÇAO */

END /*TERMINA*/

/* CRIANDO UM EXEMPLO DE TRIGGER DE BACKUP */
/* OLD PARA QUANDO O VALOR JA EXISTIR, NEW PARA VALOR ENTRANDO */
/* !!!! UMA TRIGGER COM BEFORE.INSERT E AUTO_INCREMENT DA CONFLITO, POIS SO E INCREMENTADO APOS A INSERÇAO DO DADO */
/* DA PARA ESPECIFICAR O EVENTO DELETE/INSERT CRIANDO UM CAMPO EVENTO NA TABELA BKP , E INSERTANDO O TIPO DESTE EVENTO NA TABELA */

CREATE TRIGGER BKP
BEFORE DELETE ON 'TABELA'
FOR EACH ROW
BEGIN
	INSERT INTO 'TABELA DO BKP' VALUES (OLD.'VALOR DESEJADO', OLD.'VALOR DESEJADO');
END $

/* COMUNICAÇAO ENTRE BANCOS, BASTA ESPECIFICAR ANTES DA TABELA, POR EXEMPLO EM UM INSTERT */

/* TRIGGER DE AUDITORIA */
/* BASICAMENTE JOGARIA AS INFORMAÇOES PARA OUTRA TABELA DE BKP OU AUD, POREM COM A FUNÇAO NOW() DE HORAS E DATA, USE () PARA O QUEM MEXEU E O CAMPO EVENTO */

CREATE TRIGGER AUD
AFTER UPDATE ON 'TABELA'
FOR EACH ROW
BEGIN
	INSERT INTO 'DBEXTERNA'.'TABELAEXT' VALUES (NULL,OLD.'NOME',OLD.'VALOR',NEW.'VALOR',OLD.'HORAS',NOW(),USER())

END
$

/* AUTORELACIONAMENTO */
/* EXEMPLO UMA TABELA DE CURSOS, ONDE ESSES MESMOS CURSOS PODEM SER PRE REQUISITOS DE OUTROS CURSOS */
/* SE CRIA A PK DO CURSO NORMAL E NA MESMA TABELA A FK SE REFERINDO A PK DA MESMA TABELA */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	VALOR FLOAT (6,2),
	NOME VARCHAR (20),
	HORAS FLOAT (5,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_CURSOS_CURSOS
FOREIGN KEY (ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS (VALOR, NOME, HORAS) VALUES (200.00,'MYSQL',50.00),(150.00,'POSTGREE',40.00),(300.00,'ORACLE',45.00),(350.00,'SQLSERVER',25.00);
INSERT INTO CURSOS (VALOR, NOME, HORAS, ID_PREREQ) VALUES (200.00,'MYSQLADV',30.00, 1),(100.00,'PSTGADV',24.00,2),(105.00,'ORCADV',40.00,3);

/* PARA LINKAR UM INNER JOIN COM ELA MESMA DEVE PONTEIRAR TODAS AS COLUNAS */

SELECT C.NOME, C.VALOR, C.HORAS, IFNULL(P.NOME,'N/A') AS PREREQUISITO FROM CURSOS C
LEFT JOIN CURSOS P
ON C.IDCURSO = P.ID_PREREQ;

/* LEFT JOIN RETORNA REGISTROS INCLUSIVE SEM UMA FK, RETORNA TODOS OS REGISTROS DA TABELA MAE */

/* CURSORES - PROGRAMAÇAO DENTRO DE UMA PROCEDURE PARA VARREDURA COMPLETA NA TABELA*/

CREATE PROCEDURE INSERIRDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
	DECLARE VNOME VARCHAR(50);
	
	DECLARE REG CURSOR(
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES;
	); /* SELECIONA OS DADOS PARA INSERIR NO VETOR (CONJ DE DADOS) */

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
	/* CORTA O LOOP, QUANDO NAO HOUVER MAIS VALOR NO CURSOR */

	OPEN REG; /* ABRE O CURSOR PARA MANIPULAÇÃO/ MANDA PRA MEMORIA RAM */
	
	REPEAT
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN
			SET VTOTAL = VAR1 + VAR2 + VAR3;
			SET VMEDIA = VTOTAL/3;
			
			INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
		END IF;
	UNTIL FIM END REPEAT;
	CLOSE REG;
END$

/* BANCO DE DADOS RELACIONAL (CHAO DE FABRICA) NAO SE PREOCUPA COM PERFOMANCE DE CONSULTA (JOINS) MAS SIM COM MANUTENÇAO */
/* DATA WAREHOUSE FOCA NA CONSULTA, DESNORMALIZA PARA ACELERAR O MESMO */

/* SELECT CASE - PROJEÇAO COM CONDIÇOES */
/* SUBQUERY USADA COMO BOOLEANO, PARA RETORNAR STATUS DO LIVRO */

SELECT 
    titulo,
    CASE 
        WHEN EXISTS (
            SELECT 1
            FROM Emprestimos
            WHERE Emprestimos.id_livro = Livros.IDLIVRO AND data_checkin IS NULL
        ) THEN 'Emprestado'
        ELSE 'Disponível'
    END AS disponibilidade
FROM Livros;

/* TRIGGER PARA SETAR STATUS - EX HOTEL: ACOMPANHANTE OU TITULAR */
/* USO DA SUBQUERY COMO BOOLEANO, RETORNA F/T PARA INSERIR DADO */

CREATE TRIGGER verificar_titular
BEFORE INSERT ON Hospedes_Reservas
FOR EACH ROW
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM Hospedes_Reservas
        WHERE id_reserva = NEW.id_reserva AND papel_hospede = 'Titular'
    ) THEN
        SET NEW.papel_hospede = 'Titular';
    ELSE
        SET NEW.papel_hospede = 'Acompanhante';
    END IF;
END;


